const { ApolloServer, gql } = require("apollo-server");
const { ArrayDataSource } = require("@graphql-pagination/core");
const { typeDefs: scalarTypeDefs, resolvers: scalarResolvers } = require("graphql-scalars");
const { ApolloDataSourcePager } = require("@graphql-pagination/apollo-datasource");

// generate 100 books { id : x, title: "Book x", published: "2022-01-01T14:17:11.929Z" }
const january = new Date("2022-01-01");
const createBook = (i) => {
    return {
        id: i + 1,
        title: `Book ${i + 1}`,
        author: `Author ${(i + 1) % 10}`,
        published: new Date(january.setDate(i + 1)),
    };
};
const books = Array.from(Array(100)).map((e, i) => createBook(i));

// BookConnection is generated by DataSourcePager
const typeDefs = gql`
    type Book {
        id: ID!
        title: String
        author: String
        published: DateTime
    }
    type Query {
        booksAsc(first: Int = 10 after: String): BookConnection
        booksDesc(last: Int = 10 before: String): BookConnection
    }
`;

const resolvers = {
    Query: {
        booksAsc: (_, args, { dataSources }) => dataSources.pager.forwardResolver(args),
        booksDesc: (_, args, { dataSources }) => dataSources.pager.backwardResolver(args),
    },
};

const apolloBooksPager = new ApolloDataSourcePager({
    dataSource: new ArrayDataSource(books, "id"),
    typeName: "Book",
    fetchTotalCountInResolver: false,
});

const createApolloServer = () => {
    return new ApolloServer({
        typeDefs: [
            typeDefs,
            // apolloBooksPager.typeDefs, // BookConnection, BookEdge, PageInfo typeDefs
            apolloBooksPager.typeDef.PageInfoType,
            apolloBooksPager.typeDef.ConnectionType,
            apolloBooksPager.typeDef.EdgeType,
            scalarTypeDefs, // for DateTime
        ],
        resolvers: [
            resolvers,
            apolloBooksPager.resolvers,
            scalarResolvers, // for DateTime
        ],
        dataSources: () => {
            return {
                pager: apolloBooksPager,
            };
        },
    });
};


const server = createApolloServer();

// The `listen` method launches a web server.
server.listen().then(({ url }) => {
    console.log(`ğŸš€  Server ready at ${url}`);
});
