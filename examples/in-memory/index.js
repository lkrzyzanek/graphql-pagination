const { ApolloServer, gql, UserInputError } = require("apollo-server");
const { ArrayDataSource, DataSourcePager, OffsetDataSourceWrapper } = require("@graphql-pagination/core");
const { typeDefs: scalarTypeDefs, resolvers: scalarResolvers } = require("graphql-scalars");

// generate 100 books { id : x, title: "Book x", published: "2022-01-01T14:17:11.929Z" }
const january = new Date("2022-01-01");
const createBook = (i) => {
    return {
        id: i + 1,
        title: `Book ${i + 1}`,
        author: `Author ${(i + 1) % 10}`,
        published: new Date(january.setDate(i + 1)),
    };
};
const books = Array.from(Array(100)).map((e, i) => createBook(i));
// Filter is applied only in booksByTitle query
const filter = (books, args) => {
    if (args.title) return books.filter(b => b.title === args.title);
    if (args.author) return books.filter(b => b.author === args.author);
    return books;
};
// Validation input args functions
const validateTitle = (args) => {
    if (args.title && !books.find(b => b.title === args.title)) throw new UserInputError(`Title ${args.title} not exists`);
};
const validateAuthor = (args) => {
    if (args.author && !books.find(b => b.author === args.author)) throw new UserInputError(`Author ${args.author} not exists`);
};

// create data source directly or via async function
// const ds = new ArrayDataSource(async () => books, "id", filter);
const ds = new ArrayDataSource(books, "id", filter);
const pagerById = new DataSourcePager({
    dataSource: ds,
    typeName: "Book",
    validateForwardArgs: [validateAuthor, validateTitle],
    validateBackwardArgs: [validateAuthor, validateTitle],
});

const dsPublished = new ArrayDataSource(books, "published");
const pagerPublished = new DataSourcePager({ dataSource: dsPublished, typeName: "Book" });

/* Offset Pager */
class ArrayOffsetDs extends ArrayDataSource {

    async after(offset, size, args) {
        // No field data comparison involved. It's just offset slicing
        return this.getNodes(args).then(data => data.slice(offset, offset + size));
    }

}

const dsOffset = new ArrayOffsetDs(books, "_NOT_USED_");
const pagerOffset = new DataSourcePager({
    dataSource: new OffsetDataSourceWrapper(dsOffset),
    typeName: "Book",
});


// BookConnection is generated by DataSourcePager
const typeDefs = gql`
    type Book {
        id: ID!
        title: String
        author: String
        published: DateTime
    }
    type Query {
        booksAsc(first: Int = 10 after: String): BookConnection
        booksDesc(last: Int = 10 before: String): BookConnection
        booksPublishedAsc(first: Int = 10 after: String): BookConnection
        booksPublishedDesc(last: Int = 10 before: String): BookConnection
        booksByTitle(first: Int = 10 after: String title: String): BookConnection
        booksByAuthor(first: Int = 10 after: String author: String): BookConnection

        booksByOffset(first: Int = 10 after: String): BookConnection
    }
`;

const resolvers = {
    Query: {
        booksAsc: (_, args) => pagerById.forwardResolver(args),
        booksDesc: (_, args) => pagerById.backwardResolver(args),
        booksPublishedAsc: (_, args) => pagerPublished.forwardResolver(args),
        booksPublishedDesc: (_, args) => pagerPublished.backwardResolver(args),
        booksByTitle: (_, args) => pagerById.forwardResolver(args),
        booksByAuthor: (_, args) => pagerById.forwardResolver(args),

        booksByOffset: (_, args) => pagerOffset.forwardResolver(args),
    },
};

const createApolloServer = () => {
    return new ApolloServer({
        typeDefs: [
            typeDefs,
            pagerById.typeDef.ConnectionType, // or pagerById.typeDefs to get them all
            pagerById.typeDef.EdgeType,
            pagerById.typeDef.PageInfoType,
            scalarTypeDefs, // for DateTime
        ],
        resolvers: [
            resolvers,
            scalarResolvers, // for DateTime
        ],
        formatError: error => {
            if (error.message.startsWith("Invalid cursor value")) throw new UserInputError(error.message);
            throw error;
        },
    });
};


const server = createApolloServer();

// The `listen` method launches a web server.
server.listen().then(({ url }) => {
    console.log(`ğŸš€  Server ready at ${url}`);
});
